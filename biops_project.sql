-----------------------CRIADO POR MARCELO MILONI-------------------------------
-----------------------24/03/2024 - TESTE ANALYTICS----------------------------

--CRIAÇÃO DE TODA A ESTRUTURA DO LAKE/LAKEHOUSE
CREATE OR REPLACE DATABASE RAW;
USE DATABASE RAW;
CREATE or replace SCHEMA RAW_BIOPS;
USE SCHEMA RAW_BIOPS;
CREATE OR REPLACE STAGE RAW_STG_BIOPS;
CREATE OR REPLACE STAGE RAW_HIST_STG_BIOPS;
CREATE OR REPLACE FILE FORMAT parquet_file_format
  TYPE = PARQUET
  COMPRESSION = SNAPPY;

CREATE OR REPLACE DATABASE REFINED;
USE DATABASE REFINED;
CREATE or replace SCHEMA REFINED_BIOPS;


-- CRIAÇÃO DAS TABELAS PRINCIPAIS NA CAMADA RAW

CREATE OR REPLACE TABLE RAW.RAW_BIOPS.ORDERS (
    ROW_ID INTEGER,
    ORDER_ID VARCHAR,
    ORDER_DATE DATE,
    SHIP_DATE DATE,
    SHIP_MODE VARCHAR,
    CUSTOMER_ID VARCHAR,
    CUSTOMER_NAME VARCHAR,
    SEGMENT VARCHAR,
    COUNTRY VARCHAR,
    CITY VARCHAR,
    STATE VARCHAR,
    POSTAL_CODE INT,
    REGION VARCHAR,
    PRODUCT_ID VARCHAR,
    CATEGORY VARCHAR,
    SUB_CATEGORY VARCHAR,
    PRODUCT_NAME VARCHAR,
    SALES FLOAT,
    QUANTITY INTEGER,
    DISCOUNT FLOAT,
    PROFIT FLOAT
);

CREATE OR REPLACE TABLE RAW.RAW_BIOPS.RETURNS (
    ORDER_ID VARCHAR,
    RETURNED VARCHAR
);

CREATE OR REPLACE TABLE RAW.RAW_BIOPS.PEOPLE (
    CUSTOMER_NAME VARCHAR,
    REGION VARCHAR
);

-- CRIAÇÃO DOS COPY INTO PARA CÓPIAS DOS ARQUIVOS PARQUET PARA AS TABELAS

USE RAW;
USE SCHEMA RAW_BIOPS;
TRUNCATE TABLE RAW.RAW_BIOPS.ORDERS;
COPY INTO RAW.RAW_BIOPS.ORDERS
FROM (
  SELECT
    $1:"Row ID"::INTEGER AS ROW_ID,
    $1:"Order ID"::VARCHAR AS ORDER_ID,
    DATEADD(ms, $1:"Order Date" / 1000000, '1970-01-01') AS ORDER_DATE,
    DATEADD(ms, $1:"Ship Date" / 1000000, '1970-01-01') AS SHIP_DATE,
    $1:"Ship Mode"::VARCHAR AS SHIP_MODE,
    $1:"Customer ID"::VARCHAR AS CUSTOMER_ID,
    $1:"Customer Name"::VARCHAR AS CUSTOMER_NAME,
    $1:"Segment"::VARCHAR AS SEGMENT,
    $1:"Country"::VARCHAR AS COUNTRY,
    $1:"City"::VARCHAR AS CITY,
    $1:"State"::VARCHAR AS STATE,
    $1:"Postal Code"::INTEGER AS POSTAL_CODE,
    $1:"Region"::VARCHAR AS REGION,
    $1:"Product ID"::VARCHAR AS PRODUCT_ID,
    $1:"Category"::VARCHAR AS CATEGORY,
    $1:"Sub-Category"::VARCHAR AS SUB_CATEGORY,
    $1:"Product Name"::VARCHAR AS PRODUCT_NAME,
    $1:"Sales"::FLOAT AS SALES,
    $1:"Quantity"::INTEGER AS QUANTITY,
    $1:"Discount"::FLOAT AS DISCOUNT,
    $1:"Profit"::FLOAT AS PROFIT
  FROM @RAW_STG_BIOPS/orders.parquet
)
FILE_FORMAT = (FORMAT_NAME = 'parquet_file_format');

COPY INTO RAW.RAW_BIOPS.RETURNS
FROM (
  SELECT
    $1:"Order ID"::VARCHAR AS ORDER_ID,
    $1:"Returned"::VARCHAR AS RETURNED
  FROM @RAW_STG_BIOPS/returns.parquet
)
FILE_FORMAT = (FORMAT_NAME = 'parquet_file_format');

COPY INTO RAW.RAW_BIOPS.PEOPLE
FROM (
  SELECT
    $1:"Person"::VARCHAR AS CUSTOMER_NAME,
    $1:"Region"::VARCHAR AS REGION
  FROM @RAW_STG_BIOPS/people.parquet
)
FILE_FORMAT = (FORMAT_NAME = 'parquet_file_format');


-- INÍCIO DA ESTRUTURAÇÃO DA CAMADA REFINED
-- TABELAS SERÃO CRIADAS COM TRATAMENTOS BÁSICOS E PARA FILTROS
-- VIEWS SERÃO CRIADAS PARA TODAS AS EXECUÇÕES DE VISUALIZAÇÕES E PLOTAR CHARTS NO STREAMLIT

USE DATABASE REFINED;
USE SCHEMA REFINED_BIOPS;

-- REPLICAÇÃO DA TABELA ORDERS PARA REFINED, FAZENDO A SEPARAÇÃO DO QUE É 
-- DADO CRU E O QUE UTILIZAREMOS NAS CAMADAS DE ANÁLISE
CREATE OR REPLACE TABLE REFINED.REFINED_BIOPS.ORDERS AS
SELECT * FROM RAW.RAW_BIOPS.ORDERS;

-- REPLICAÇÃO DAS OUTRAS TABELAS PRINCIAIS PARA A REFINED
CREATE OR REPLACE TABLE REFINED.REFINED_BIOPS.PEOPLE AS
SELECT * FROM RAW.RAW_BIOPS.PEOPLE;

CREATE OR REPLACE TABLE REFINED.REFINED_BIOPS.RETURNS AS
SELECT * FROM RAW.RAW_BIOPS.RETURNS;

-- CRIAÇÃO DAS TABELAS E VIEW PARA IDENTIFICAÇÃO DE UNIT PRICES

CREATE OR REPLACE TABLE DECLARED_UNIT_PRICES AS
SELECT DISTINCT
    PRODUCT_ID,
    FIRST_VALUE(SALES) OVER(PARTITION BY PRODUCT_ID ORDER BY ORDER_DATE) AS "Unit Price"
FROM RAW.RAW_BIOPS.ORDERS
WHERE QUANTITY = 1 AND DISCOUNT = 0
QUALIFY ROW_NUMBER() OVER(PARTITION BY PRODUCT_ID ORDER BY ORDER_DATE) = 1;

CREATE OR REPLACE TABLE CALCULATED_UNIT_PRICES AS
SELECT DISTINCT PRODUCT_ID, 
    FIRST_VALUE(SALES) OVER(PARTITION BY PRODUCT_ID ORDER BY ORDER_DATE)/
    FIRST_VALUE(QUANTITY) OVER(PARTITION BY PRODUCT_ID ORDER BY ORDER_DATE) AS "Unit Price"
FROM RAW.RAW_BIOPS.ORDERS
WHERE QUANTITY > 1 AND DISCOUNT = 0;

CREATE OR REPLACE TABLE OTHER_UNIT_PRICES AS
SELECT PRODUCT_ID, AVG(SALES / (QUANTITY * (1 - DISCOUNT))) AS "Unit Price"
FROM RAW.RAW_BIOPS.ORDERS
WHERE PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM DECLARED_UNIT_PRICES)
AND PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM CALCULATED_UNIT_PRICES)
GROUP BY PRODUCT_ID;

-- A VIEW UNE TODAS AS INFORMAÇÕES CALCULADAS PARA DIFERENTES CENÁRIOS
CREATE OR REPLACE VIEW VW_UNIT_PRICES AS
SELECT * FROM DECLARED_UNIT_PRICES
UNION ALL
SELECT * FROM CALCULATED_UNIT_PRICES
UNION ALL
SELECT * FROM OTHER_UNIT_PRICES;


-- VIEW PARA RENDERIZAR INFORMAÇÕES SOBRE ANOMALIAS EM ENDEREÇOS
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_ADDRESS_ANOMALIES AS
WITH AddressCounts AS (
    SELECT 
        CUSTOMER_ID,
        COUNT(DISTINCT POSTAL_CODE) AS Unique_Postal_Code
    FROM REFINED.REFINED_BIOPS.ORDERS
    GROUP BY CUSTOMER_ID
)
SELECT a.CUSTOMER_ID, a.Unique_Postal_Code, o.customer_name, o.postal_code
FROM AddressCounts a
inner join refined.refined_biops.orders o on a.customer_id = o.customer_id
WHERE Unique_Postal_Code > 1
group by a.CUSTOMER_ID, a.Unique_Postal_Code, o.customer_name, o.postal_code
order by unique_postal_code, customer_id;
--CHECAR RESULTADO
select * from vw_address_anomalies;


-- VIEWS PARA RENDERIZAR ANÁLISES DE LUCRO NEGATIVO
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_NEGATIVE_PROFIT AS
SELECT *
FROM REFINED.REFINED_BIOPS.ORDERS
WHERE PROFIT < 0;

CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_NEGATIVE_PROFIT_ANALYSIS AS
SELECT 
    ORDER_ID,
    PRODUCT_ID,
    SALES / QUANTITY AS "Sales per Unit",
    PROFIT / QUANTITY AS "Profit per Unit",
    (SALES - PROFIT) / QUANTITY AS "Total Cost per Unit",
    (PROFIT / SALES) * 100 AS "Profit Margin"
FROM REFINED.REFINED_BIOPS.ORDERS
WHERE PROFIT < 0;


-- CRIAÇÃO DA VIEW ORDERS COM O MESMO DATASET DA TABELA, APENAS SEGUINDO A PREMISSA
-- DE QUE SE UM DATASET SERÁ RENDERIZADO, ELE VIRÁ DE UMA VIEW
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_ORDERS AS
SELECT * FROM REFINED.REFINED_BIOPS.ORDERS;

-- CRIAÇÃO DE VIEW AGRUPANDO POR ORDER ID, SOMANDO CAMPOS DE SALES E PROFIT
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_GROUPED_ORDERS AS
SELECT 
    ORDER_ID,
    ORDER_DATE,
    SHIP_DATE,
    SHIP_MODE,
    SUM(SALES) AS "Sales",
    SUM(PROFIT) AS "Profit",
    CUSTOMER_NAME
FROM REFINED.REFINED_BIOPS.ORDERS
GROUP BY ORDER_ID,
    ORDER_DATE,
    SHIP_DATE,
    SHIP_MODE,
    CUSTOMER_NAME;


-- VIEW DR ORDER IDS AGRUPADOS, COM COMPLEMENTO DE JOIN COM DATASET PEOPLE
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_GROUPED_JOINED_ORDERS AS
SELECT 
    g.ORDER_ID,
    g.ORDER_DATE,
    g.SHIP_DATE,
    g.SHIP_MODE,
    g."Sales",
    g."Profit",
    g.CUSTOMER_NAME,
    p.REGION AS "Person_Region"
FROM REFINED.REFINED_BIOPS.VW_GROUPED_ORDERS g
INNER JOIN REFINED.REFINED_BIOPS.PEOPLE p
ON g.Customer_Name = p.CUSTOMER_NAME;

-- VIEW DR ORDER IDS AGRUPADOS, COM COMPLEMENTO DE JOIN COM DATASET RETURNS
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_ORDERS_WITH_RETURNS AS
SELECT 
    g.*,
    r.RETURNED
FROM REFINED.REFINED_BIOPS.VW_GROUPED_ORDERS g
LEFT JOIN REFINED.REFINED_BIOPS.RETURNS r
ON g.ORDER_ID = r.ORDER_ID;


-- VIEW PARA ANÁLISE DE ANOMALIAS DE LUCRO, COM CRIAÇÃO DE MÉTRICAS E CAMPOS CALCULADOS
-- QUE SERÃO MUITO IMPORTANTES PARA CRIAÇÃO DE OUTROS DATASETS
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_NEGATIVE_PROFIT_ANOMALIES AS
SELECT 
    np.ORDER_ID,
    np.PRODUCT_ID,
    np.QUANTITY,
    np.SALES,
    np.DISCOUNT,
    np.PROFIT,
    up."Unit Price",
    (up."Unit Price" * np.QUANTITY) AS "Total Price b/ Discount",
    (np.SALES - np.PROFIT) AS "Total Cost",
    "Total Price b/ Discount" - "Total Cost" AS "Profit w/ Discount",
    (np.PROFIT / np.SALES) * 100 AS "Profit Margin",
    ("Profit w/ Discount" / "Total Price b/ Discount") * 100 AS "Profit Margin w/ Discount"
FROM REFINED.REFINED_BIOPS.VW_NEGATIVE_PROFIT np
LEFT JOIN REFINED.REFINED_BIOPS.VW_UNIT_PRICES up ON np.PRODUCT_ID = up.PRODUCT_ID;


-- VIEW CRIADA APENAS COM O FILTRO PARA RETORNAR REGISTROS COM LUCROS POSITIVOS
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_POSITIVE_PROFIT AS
SELECT *
FROM REFINED.REFINED_BIOPS.ORDERS
WHERE PROFIT >= 0;

-- VIEW PARA ANÁLISE DE PERFORMANCE DOS PRODUTOS
CREATE OR REPLACE VIEW REFINED.REFINED_BIOPS.VW_PRODUCT_PERFORMANCE AS
SELECT 
    PRODUCT_ID,
    SUM(SALES) AS Sales,
    SUM(PROFIT) AS Profit,
    MIN(PRODUCT_NAME) AS Product_Name,  
    MIN(CATEGORY) AS Category, 
    MIN(SUB_CATEGORY) AS Sub_Category  
FROM REFINED.REFINED_BIOPS.ORDERS
GROUP BY PRODUCT_ID
ORDER BY PRODUCT_ID;


-- SELECT FAZENDO JOIN DAS 3 TABELAS PRINCIPAIS
SELECT 
    g.ORDER_ID,
    g.ORDER_DATE,
    g.SHIP_DATE,
    g.SHIP_MODE,
    g."Sales",
    g."Profit",
    g.CUSTOMER_NAME,
    p.REGION AS "Person_Region",
    r.RETURNED
FROM REFINED.REFINED_BIOPS.VW_GROUPED_ORDERS g
INNER JOIN REFINED.REFINED_BIOPS.PEOPLE p
ON g.Customer_Name = p.CUSTOMER_NAME
LEFT JOIN REFINED.REFINED_BIOPS.RETURNS r
ON g.ORDER_ID = r.ORDER_ID
WHERE r.returned = 'Yes';


-- CRIANDO UM STREAM PARA CAPTURAR CARGAS INCREMENTAIS NA TABELA ORDERS
USE RAW;
USE SCHEMA RAW_BIOPS;
CREATE OR REPLACE STREAM raw_biops_orders_stream ON TABLE RAW.RAW_BIOPS.ORDERS
APPEND_ONLY = TRUE;
-- APONTANDO PARA A TABELA ORDERS NA REFINED RECEBER OS STREAMS
USE REFINED;
USE SCHEMA REFINED_BIOPS;
INSERT INTO REFINED.REFINED_BIOPS.ORDERS
SELECT 	ROW_ID,
	ORDER_ID,
	ORDER_DATE,
	SHIP_DATE,
	SHIP_MODE,
	CUSTOMER_ID,
	CUSTOMER_NAME,
	SEGMENT,
	COUNTRY,
	CITY,
	STATE,
	POSTAL_CODE,
	REGION,
	PRODUCT_ID,
	CATEGORY,
	SUB_CATEGORY,
	PRODUCT_NAME,
	SALES,
	QUANTITY,
	DISCOUNT,
	PROFIT
FROM RAW.RAW_BIOPS.raw_biops_orders_stream;

-- COMPARANDO OS COUNTS DAS DUAS TABELAS, PARA CHECAR SE O STREAMS FUNCIONOU
SELECT COUNT(*) FROM RAW.RAW_BIOPS.ORDERS;
SELECT COUNT(*) FROM REFINED.REFINED_BIOPS.ORDERS;

-- INSERT DE EXEMPLO PARA VALIDAR O FUNCTIONAMENTO DO STREAMS
INSERT INTO RAW.RAW_BIOPS.ORDERS (
    ROW_ID,
	ORDER_ID,
	ORDER_DATE,
	SHIP_DATE,
	SHIP_MODE,
	CUSTOMER_ID,
	CUSTOMER_NAME,
	SEGMENT,
	COUNTRY,
	CITY,
	STATE,
	POSTAL_CODE,
	REGION,
	PRODUCT_ID,
	CATEGORY,
	SUB_CATEGORY,
	PRODUCT_NAME,
	SALES,
	QUANTITY,
	DISCOUNT,
	PROFIT
)
SELECT
9995,	
'CA-2017-119915',
'8/17/2017',
'8/17/2017',
'Same Day',
'CC-12220',
'Chris Cortes',
'Consumer',
'United States',
'Westminster',
'California',
92683,
'West',
'OFF-AP-10002684',
'Office Supplies',
'Appliances',
'Acco 7-Outlet Masterpiece Power Center, Wihtout Fax/Phone Line Protection',
243.16,
2,
0,
72.948					
;